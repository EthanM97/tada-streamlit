import streamlit as st

#-------------------function to load tab one--------------------------------

def get_tab_one():
 with st.container():

            st.subheader("Remove Duplicates")
            
            if st.session_state.num_duplicates > 0: 

                col1, col2, col3 = st.columns([2,2,1])
                
                with col1:
                    st.write(f"We found {st.session_state.num_duplicates} duplicate rows in your data!")
                
                with col2:
                    # Checkbox to show only duplicate rows
                    duplicates_only = st.checkbox("Show only duplicate rows", value=False, key="show_duplicates", on_change=show_only_duplicates)
                
                dropdown = st.selectbox("Select the duplicated row you wish to remove", get_indices_of_duplicates(st.session_state.main_df), key="remove_specific_duplicates")

                col1, col2, col3 = st.columns([3, 3, 5])
                with col1: 
                    st.session_state.remove_selected = st.button("Remove Selected Duplicates" , on_click=remove_selected_duplicates, key="row")
                with col2:   
                    # Button to remove all duplicates
                    st.session_state.remove_all = st.button("Remove All Duplicates" , on_click=remove_duplicates)
                     
                #whenever a row is removed print row x removed successfully
                if st.session_state.remove_selected:
                    st.success(f"Selected row removed successfully!")
                elif st.session_state.remove_all:
                    st.success(f"All duplicate rows have been removed!")
                    
            elif st.session_state.num_duplicates <= 0 and 'remove_selected' in st.session_state or 'remove_all' in st.session_state: 
                st.success(f"No duplicate rows remaining! Select another preprocessing function from the tabs above, or move on to Visualization (STEP 2)")
                col1, col2, col3, col4, col5 = st.columns([3,1,1,1,1])
                
                with col1:
                    show_undo_button()
            else:
                st.success(f"No duplicate rows found in your data! Select another preprocessing function from the tabs above, or move on to Visualization (STEP 2)")    
                col1, col2, col3, col4, col5 = st.columns([3,1,1,1,1])
                
                with col1:
                    show_undo_button()

            # Display the DataFrame with applied customizations
            st.dataframe(st.session_state.main_df)
            col1, col2, col3, col4, col5 = st.columns([2,1,1,1,1])

            with col4:
                    show_csv_download_button()
            with col5:    
                show_visualization_button()

    #removing or filling in missing data 
    #PROBLEM_2A => need to make dynamic => the total missing values and list of features with missing values should be updated after each change
                    



#-------------------functions to remove duplicates--------------------------------

#function to count number of duplicate rows in dataframe

def count_duplicate_rows(df):
    """
    Count the number of duplicate rows in a DataFrame

    Args:
        df (pandas.DataFrame): The DataFrame to analyze

    Returns:
        int: The number of duplicate rows
    """
    return df.duplicated().sum()

#returns df of duplicate rows

def get_duplicate_rows(df):

    return df[df.duplicated(keep=False)]

#function to remove duplicate rows from dataframe

def remove_duplicate_rows(df):
    """
    Remove duplicate rows from a DataFrame

    Args:
        df (pandas.DataFrame): The DataFrame to clean

    Returns:
        pandas.DataFrame: The DataFrame with duplicate rows removed
    """
    df_clean = df.copy()  # Create a copy of the DataFrame
    df_clean.drop_duplicates(inplace=True)
    return df_clean

def show_only_duplicates():   
    if st.session_state.show_duplicates:
        st.session_state.main_df = get_duplicate_rows(st.session_state.main_df)
    else:

        st.session_state.main_df = st.session_state.modified_df

def remove_duplicates():
    st.session_state.modified_df = remove_duplicate_rows(st.session_state.main_df)
    st.session_state.main_df = st.session_state.modified_df
    st.session_state.num_duplicates = count_duplicate_rows(st.session_state.main_df)

def remove_selected_duplicates():
    st.session_state.main_df.drop(st.session_state.remove_specific_duplicates, inplace=True)
    st.session_state.modified_df = st.session_state.main_df.copy()
    st.session_state.num_duplicates = count_duplicate_rows(st.session_state.main_df)

def get_indices_of_duplicates(df):
    '''return the indices of duplicate rows in the data set'''
    return df[df.duplicated(keep=False)].index
